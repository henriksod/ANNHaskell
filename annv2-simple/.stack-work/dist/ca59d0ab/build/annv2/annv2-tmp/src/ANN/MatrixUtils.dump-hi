
==================== FINAL INTERFACE ====================
2017-10-09 11:51:32.87125 UTC

interface main@main:ANN.MatrixUtils 8002
  interface hash: b0a2dbebefdd69906df18c3a004a5365
  ABI hash: 57ce8606ce2775e9626281102ca3989e
  export-list hash: cc0a29729dbcc70af12dbc4541a77cf9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a8064a744799bfe694f5aed9eb4f47a9
  sig of: Nothing
  used TH splices: False
  where
exports:
  ANN.MatrixUtils.hadamard
  ANN.MatrixUtils.sumAll2x2
  ANN.MatrixUtils.to2x2Martices
  ANN.MatrixUtils.ColumnVector
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 loop-0.3.0@loop-0.3.0-4tGn4RSY02pFTwJ5L4CYRr
                      matrix-0.3.5.0@matrix-0.3.5.0-JvohPyGMusrL7Y0WxYUz8w
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  matrix-0.3.5.0@matrix-0.3.5.0-JvohPyGMusrL7Y0WxYUz8w:Data.Matrix bf891f258ea75a4e62c2cf20c00a338b
64974ad6091efffef10c38c9c1044298
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ANN.MatrixUtils.$trModule2
                   ANN.MatrixUtils.$trModule1) -}
8ab0f5709ff29b783fd3b6925dd58e0d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ANN.MatrixUtils"#) -}
2f27773fa3647df09c5941c7c10363e1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
121f54e5754944e86e647d9b9bda4e22
  $whadamard ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Double
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Double
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector GHC.Types.Double #)
  {- Arity: 12,
     Strictness: <S,U><S,U><L,U><L,U><L,U><L,U(U,A,U)><S,U><S,U><L,U><L,U><L,U><L,U(U,A,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: Data.Vector.Vector GHC.Types.Double)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: GHC.Prim.Int#)
                   (ww9 :: GHC.Prim.Int#)
                   (ww10 :: GHC.Prim.Int#)
                   (ww11 :: Data.Vector.Vector GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww7) of wild {
                   GHC.Types.False
                   -> case ANN.MatrixUtils.$wlvl ww6 ww7 ww ww1
                      ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
                                GHC.Prim.Int#, GHC.Prim.Int#,
                                Data.Vector.Vector GHC.Types.Double #)
                      of {}
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww6) of wild1 {
                        GHC.Types.False
                        -> case ANN.MatrixUtils.$wlvl ww6 ww7 ww ww1
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
                                     GHC.Prim.Int#, GHC.Prim.Int#,
                                     Data.Vector.Vector GHC.Types.Double #)
                           of {}
                        GHC.Types.True
                        -> (# ww, ww1, 0#, 0#, ww1,
                              case GHC.Magic.runRW#
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Vector GHC.Types.Double)
                                     (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      let {
                                        n :: GHC.Prim.Int# = GHC.Prim.*# ww ww1
                                      } in
                                      let {
                                        $j :: GHC.Prim.Int#
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.Vector.Vector GHC.Types.Double #)
                                          {- Arity: 1, Strictness: <S,U> -}
                                        = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                          case GHC.Prim.newArray#
                                                 @ GHC.Types.Double
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 n#
                                                 (Data.Vector.Mutable.uninitialised
                                                    @ GHC.Types.Double)
                                                 s1
                                                   `cast`
                                                 (GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                                          letrec {
                                            $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                -> GHC.Prim.Int#
                                                                -> [GHC.Types.Double]
                                                                -> GHC.Prim.Int#
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Types.Int #)
                                              {- Arity: 4, Strictness: <S,U><S,U><L,1*U><L,U> -}
                                            = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                                                (sc1 :: GHC.Prim.Int#)
                                                (sc2 :: [GHC.Types.Double])
                                                (sc3 :: GHC.Prim.Int#) ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.<=# sc1 0#) of wild2 {
                                                GHC.Types.False
                                                -> case sc2 of wild3 {
                                                     [] -> (# sc, GHC.Types.I# sc3 #)
                                                     : x xs1
                                                     -> case GHC.Prim.writeArray#
                                                               @ (Control.Monad.Primitive.PrimState
                                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                               @ GHC.Types.Double
                                                               ipv1
                                                               sc3
                                                               x
                                                               sc
                                                                 `cast`
                                                               (GHC.Prim.State#
                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                            <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                        $s$wfoldlM'_loop
                                                          s'#
                                                            `cast`
                                                          (GHC.Prim.State#
                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N))_R
                                                          (GHC.Prim.-# sc1 1#)
                                                          xs1
                                                          (GHC.Prim.+# sc3 1#) } }
                                                GHC.Types.True -> (# sc, GHC.Types.I# sc3 #) }
                                          } in
                                          case $s$wfoldlM'_loop
                                                 ipv
                                                   `cast`
                                                 (GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R
                                                 n
                                                 (GHC.List.zipWith
                                                    @ GHC.Types.Double
                                                    @ GHC.Types.Double
                                                    @ GHC.Types.Double
                                                    GHC.Float.timesDouble
                                                    (Data.Matrix.$wtoList
                                                       @ GHC.Types.Double
                                                       ww
                                                       ww1
                                                       ww2
                                                       ww3
                                                       ww4
                                                       ww5)
                                                    (Data.Matrix.$wtoList
                                                       @ GHC.Types.Double
                                                       ww6
                                                       ww7
                                                       ww8
                                                       ww9
                                                       ww10
                                                       ww11))
                                                 0# of ds2 { (#,#) ipv6 ipv7 ->
                                          case ipv7 of dt5 { GHC.Types.I# dt6 ->
                                          case GHC.Prim.unsafeFreezeArray#
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 @ GHC.Types.Double
                                                 ipv1
                                                 ipv6
                                                   `cast`
                                                 (GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                                          (# ipv2
                                               `cast`
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                     <GHC.Prim.RealWorld>_N))_R,
                                             Data.Vector.Vector
                                               @ GHC.Types.Double
                                               0#
                                               dt6
                                               ipv3 #) } } } }
                                      } in
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<=# n 0#) of wild2 {
                                        GHC.Types.False -> $j n
                                        GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                              ipv2 } #) } }) -}
1af01fcf0895682878c371f24a403d78
  $wlvl ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Matrix.Matrix GHC.Types.Double
  {- Arity: 4, Strictness: <B,U><B,U><B,U><B,U>x, Inline: [0] -}
3b37b4c06781f291e1f98d2bee269311
  $wlvl1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Double
    -> Data.Monoid.Sum GHC.Types.Double
  {- Arity: 6, Strictness: <S,U><S,U><S,U><S,U><S,U><L,U(U,A,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: Data.Vector.Vector GHC.Types.Double) ->
                 Data.Matrix.$w$csum
                   @ GHC.Types.Double
                   GHC.Float.$fNumDouble
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5) -}
ee3d18f871038e0a675bc3239ceaed08
  $wlvl2 :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Types.Double]
  {- Arity: 2, Strictness: <B,U><B,U>x, Inline: [0] -}
1c74b109e2741e5434ef9dbe19f01ec3
  $wsumAll2x2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Double
    -> [GHC.Types.Double]
  {- Arity: 6, Strictness: <S,U><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: Data.Vector.Vector GHC.Types.Double) ->
                 let {
                   $j :: GHC.Prim.Void# -> [GHC.Types.Double]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> [GHC.Types.Double]
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         case GHC.Prim.remInt# ww 2# of wild {
                           DEFAULT -> ANN.MatrixUtils.$wlvl2 ww ww1
                           0#
                           -> case ww1 of wild1 {
                                DEFAULT -> ANN.MatrixUtils.$wlvl2 ww wild1
                                1#
                                -> GHC.Base.map
                                     @ (Data.Matrix.Matrix GHC.Types.Double)
                                     @ GHC.Types.Double
                                     ANN.MatrixUtils.sumAll2x1
                                       `cast`
                                     (<Data.Matrix.Matrix GHC.Types.Double>_R
                                      ->_R Data.Monoid.N:Sum[0] <GHC.Types.Double>_R)
                                     (ANN.MatrixUtils.$wto2x2Martices ww 1# ww2 ww3 ww4 ww5) } }
                     } in
                     case GHC.Prim.remInt# ww1 2# of wild {
                       DEFAULT -> $j1 GHC.Prim.void#
                       0#
                       -> case ww of wild1 {
                            DEFAULT -> $j1 GHC.Prim.void#
                            1#
                            -> GHC.Base.map
                                 @ (Data.Matrix.Matrix GHC.Types.Double)
                                 @ GHC.Types.Double
                                 ANN.MatrixUtils.sumAll2x1
                                   `cast`
                                 (<Data.Matrix.Matrix GHC.Types.Double>_R
                                  ->_R Data.Monoid.N:Sum[0] <GHC.Types.Double>_R)
                                 (ANN.MatrixUtils.$wto2x2Martices 1# ww1 ww2 ww3 ww4 ww5) } }
                 } in
                 case GHC.Prim.remInt# ww1 2# of wild {
                   DEFAULT -> $j GHC.Prim.void#
                   0#
                   -> case GHC.Prim.remInt# ww 2# of wild1 {
                        DEFAULT -> $j GHC.Prim.void#
                        0#
                        -> GHC.Base.map
                             @ (Data.Matrix.Matrix GHC.Types.Double)
                             @ GHC.Types.Double
                             ANN.MatrixUtils.sumAll2x1
                               `cast`
                             (<Data.Matrix.Matrix GHC.Types.Double>_R
                              ->_R Data.Monoid.N:Sum[0] <GHC.Types.Double>_R)
                             (ANN.MatrixUtils.$wto2x2Martices ww ww1 ww2 ww3 ww4 ww5) } }) -}
924cde73248dc3008f5ee5043a562a23
  $wto2x2Martices ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Double
    -> [Data.Matrix.Matrix GHC.Types.Double]
  {- Arity: 6, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
4163f76af675644a6280005b342f5ebf
  type ColumnVector a = Data.Matrix.Matrix a
258189614c3a3d6a39efb42a1e9894b8
  hadamard ::
    Data.Matrix.Matrix GHC.Types.Double
    -> Data.Matrix.Matrix GHC.Types.Double
    -> Data.Matrix.Matrix GHC.Types.Double
  {- Arity: 2,
     Strictness: <S(SSLLLL),1*U(U,U,U,U,U,U(U,A,U))><S(SSLLLL),1*U(U,U,U,U,U,U(U,A,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Matrix.Matrix GHC.Types.Double)
                   (w1 :: Data.Matrix.Matrix GHC.Types.Double) ->
                 case w of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { Data.Matrix.M ww8 ww9 ww10 ww11 ww12 ww13 ->
                 case ANN.MatrixUtils.$whadamard
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13 of ww14 { (#,,,,,#) ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Data.Matrix.M
                   @ GHC.Types.Double
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20 } } }) -}
96707e0721966bda4852a9be90bd1e7c
  sumAll2x1 ::
    Data.Matrix.Matrix GHC.Types.Double
    -> Data.Monoid.Sum GHC.Types.Double
  {- Arity: 1, Strictness: <S(SSSSSL),1*U(U,U,U,U,U,U(U,A,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Matrix.Matrix GHC.Types.Double) ->
                 case w of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 ANN.MatrixUtils.$wlvl1 ww1 ww2 ww3 ww4 ww5 ww6 }) -}
5f8da34aa5435841dd1f9faf964fe122
  sumAll2x2 ::
    Data.Matrix.Matrix GHC.Types.Double -> [GHC.Types.Double]
  {- Arity: 1, Strictness: <S(SSLLLL),1*U(U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Matrix.Matrix GHC.Types.Double) ->
                 case w of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 ANN.MatrixUtils.$wsumAll2x2 ww1 ww2 ww3 ww4 ww5 ww6 }) -}
3752828bbe2c720e66374783a125c321
  to2x2Martices ::
    Data.Matrix.Matrix GHC.Types.Double
    -> [Data.Matrix.Matrix GHC.Types.Double]
  {- Arity: 1, Strictness: <S(SLLLLL),U(U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Matrix.Matrix GHC.Types.Double) ->
                 case w of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 ANN.MatrixUtils.$wto2x2Martices ww1 ww2 ww3 ww4 ww5 ww6 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

