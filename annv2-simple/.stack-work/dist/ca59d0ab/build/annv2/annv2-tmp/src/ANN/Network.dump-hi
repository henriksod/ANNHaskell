
==================== FINAL INTERFACE ====================
2018-05-10 14:29:42.3550921 UTC

interface main@main:ANN.Network 8002
  interface hash: bd197f1ce7fb02c5eb764de45f82e782
  ABI hash: 0157058a50944c8db0d215147edf9cea
  export-list hash: 61af9d3d01ed4603d42290350138e792
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a8064a744799bfe694f5aed9eb4f47a9
  sig of: Nothing
  used TH splices: False
  where
exports:
  ANN.Network.backpropagateNet
  ANN.Network.buildNetwork
  ANN.Network.getOutput
  ANN.Network.getWeights
  ANN.Network.propagateNet
  ANN.Network.updateNet
  ANN.Network.Network{ANN.Network.Network layers learningRate}
module dependencies: ANN.ActivationFunction ANN.Layer
                     ANN.MatrixUtils
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 loop-0.3.0@loop-0.3.0-4tGn4RSY02pFTwJ5L4CYRr
                      matrix-0.3.5.0@matrix-0.3.5.0-JvohPyGMusrL7Y0WxYUz8w
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ANN.ActivationFunction e92592ac434db9b1002458bf0b297166
  exports: ec8866300e01984a2bdb93e4524c6707
  ActivationSpec 9fb3d0e3a35a2a741e41dc453db6020c
import  -/  ANN.Layer bf57acc8869d289f92950e73fb357a21
  exports: 23c3cc260ccc1ffb148f4c2ade900907
  BackpropagatedLayer edfe419f1619c6d9c281969f45f86cc5
  Layer 3740adea9140c73e07d2275218821265
  Layer b866aaba8309eb48fc1f8620fe1104f2
  PropagatedLayer 4b9e3fdffd66404689c810f9444e6174
  PropagatedSensorLayer ab52206ace989c455d40d943f6e52c33
  backpropagate 30467f37d0f45655558c284b35c3dc4d
  backpropagateFinalLayer a1541c947619e1fa9adffc30c97acd2d
  lAS cd6d192b197bb01b92cd195005cf9a7a
  lB d220b6580bc827c6c2637cc0fe4fd5d7
  lW 2bfaa02d6948c457970f6022ed2e63ba
  pOut 263ec8019df650b13dee4c57bd99c89e
  pW 2386a24880499cce20f6d3981757316a
  propagate f43375f9149eac3d54fe5599e8aabda7
  update b4fcf00911e6ccd511a0228926fa4020
import  -/  ANN.MatrixUtils ae1742b9fe1520ac81fa34740122d55c
  exports: cc0a29729dbcc70af12dbc4541a77cf9
  ColumnVector 4163f76af675644a6280005b342f5ebf
import  -/  matrix-0.3.5.0@matrix-0.3.5.0-JvohPyGMusrL7Y0WxYUz8w:Data.Matrix bf891f258ea75a4e62c2cf20c00a338b
75d44a4607a270e2e45f6b6a67ec6ba0
  $tc'Network :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3562801338034712714##
                   6387293939321402552##
                   ANN.Network.$trModule
                   ANN.Network.$tc'Network1) -}
2c37737d755b25f368ff81a5f9a2b8f6
  $tc'Network1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Network"#) -}
cc3a35278bace18bf5661d84bb784f95
  $tcNetwork :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4952554643922697401##
                   7614118550136055580##
                   ANN.Network.$trModule
                   ANN.Network.$tcNetwork1) -}
91a65e9dda29003537653a7a3d69d0c1
  $tcNetwork1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Network"#) -}
5e09593427c5edb1940b0d7d6e2b41f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ANN.Network.$trModule2
                   ANN.Network.$trModule1) -}
41ba1f97a9569273cd9719d0274a7f65
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ANN.Network"#) -}
283cf79243403ee2644638cf1f776382
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
2a9d6aaac24b717645f2542659fa0b9e
  $wbackpropagateNet ::
    ANN.MatrixUtils.ColumnVector GHC.Types.Double
    -> [ANN.Layer.PropagatedLayer]
    -> (# ANN.Layer.BackpropagatedLayer,
          [ANN.Layer.BackpropagatedLayer] #)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U(U,A,U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: ANN.MatrixUtils.ColumnVector GHC.Types.Double)
                   (w1 :: [ANN.Layer.PropagatedLayer]) ->
                 case w1 of wild {
                   []
                   -> case GHC.List.init2
                      ret_ty (# ANN.Layer.BackpropagatedLayer,
                                [ANN.Layer.BackpropagatedLayer] #)
                      of {}
                   : x xs
                   -> GHC.List.$wscanr
                        @ ANN.Layer.PropagatedLayer
                        @ ANN.Layer.BackpropagatedLayer
                        ANN.Layer.backpropagate
                        (case ANN.Layer.$wbackpropagateFinalLayer
                                (ANN.Network.backpropagateNet_go
                                   wild
                                   (GHC.List.lastError @ ANN.Layer.PropagatedLayer))
                                w of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                         ANN.Layer.BackpropagatedLayer
                           ww1
                           ww2
                           ww3
                           ww4
                           ww5
                           ww6
                           ww7
                           ww8
                           ww9 })
                        (GHC.List.init1 @ ANN.Layer.PropagatedLayer x xs) }) -}
ac74810b8dfab78dfc65d808d3c4565f
  $wbuildNetwork ::
    GHC.Types.Double
    -> [Data.Matrix.Matrix GHC.Types.Double]
    -> ANN.ActivationFunction.ActivationSpec
    -> (# [ANN.Layer.Layer], GHC.Types.Double #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Double)
                   (w1 :: [Data.Matrix.Matrix GHC.Types.Double])
                   (w2 :: ANN.ActivationFunction.ActivationSpec) ->
                 (# case w1 of wild {
                      [] -> GHC.Types.[] @ ANN.Layer.Layer
                      : x xs
                      -> GHC.Base.map
                           @ (Data.Matrix.Matrix GHC.Types.Double)
                           @ ANN.Layer.Layer
                           (\ (w3 :: Data.Matrix.Matrix GHC.Types.Double) ->
                            ANN.Layer.Layer
                              w3
                              (case w3 of wild1 { Data.Matrix.M dt dt1 dt2 dt3 dt4 ds1 ->
                               Data.Matrix.M
                                 @ GHC.Types.Double
                                 dt
                                 1#
                                 0#
                                 0#
                                 1#
                                 (case GHC.Magic.runRW#
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.Vector.Vector GHC.Types.Double)
                                         (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                          let {
                                            $j :: GHC.Prim.Int#
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.Vector GHC.Types.Double #)
                                              {- Arity: 1, Strictness: <S,U> -}
                                            = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                              case GHC.Prim.newArray#
                                                     @ GHC.Types.Double
                                                     @ (Control.Monad.Primitive.PrimState
                                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                                     n#
                                                     (Data.Vector.Mutable.uninitialised
                                                        @ GHC.Types.Double)
                                                     s1
                                                       `cast`
                                                     (GHC.Prim.State#
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                              letrec {
                                                $wfoldlM'_loop :: GHC.Types.SPEC
                                                                  -> GHC.Prim.Int#
                                                                  -> [GHC.Types.Double]
                                                                  -> GHC.Prim.Int#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Types.Int #)
                                                  {- Arity: 5,
                                                     Strictness: <S,1*U><L,U><L,1*U><S,U><S,U>,
                                                     Inline: [0] -}
                                                = \ (w4 :: GHC.Types.SPEC)
                                                    (ww :: GHC.Prim.Int#)
                                                    (ww1 :: [GHC.Types.Double])
                                                    (ww2 :: GHC.Prim.Int#)
                                                    (w5 :: GHC.Prim.State#
                                                             GHC.Prim.RealWorld)[OneShot] ->
                                                  case w4 of ds5 { DEFAULT ->
                                                  case GHC.Prim.tagToEnum#
                                                         @ GHC.Types.Bool
                                                         (GHC.Prim.<=# ww2 0#) of wild2 {
                                                    GHC.Types.False
                                                    -> case ww1 of wild3 {
                                                         [] -> (# w5, GHC.Types.I# ww #)
                                                         : x1 xs1
                                                         -> case GHC.Prim.writeArray#
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   @ GHC.Types.Double
                                                                   ipv1
                                                                   ww
                                                                   x1
                                                                   w5
                                                                     `cast`
                                                                   (GHC.Prim.State#
                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                            $wfoldlM'_loop
                                                              GHC.Types.SPEC
                                                              (GHC.Prim.+# ww 1#)
                                                              xs1
                                                              (GHC.Prim.-# ww2 1#)
                                                              s'#
                                                                `cast`
                                                              (GHC.Prim.State#
                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N))_R } }
                                                    GHC.Types.True -> (# w5, GHC.Types.I# ww #) } }
                                              } in
                                              case $wfoldlM'_loop
                                                     GHC.Types.SPEC
                                                     0#
                                                     ANN.Network.buildNetwork2
                                                     dt
                                                     ipv
                                                       `cast`
                                                     (GHC.Prim.State#
                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                             <GHC.Prim.RealWorld>_N))_R of ds3 { (#,#) ipv6 ipv7 ->
                                              case ipv7 of dt5 { GHC.Types.I# dt6 ->
                                              case GHC.Prim.unsafeFreezeArray#
                                                     @ (Control.Monad.Primitive.PrimState
                                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                                     @ GHC.Types.Double
                                                     ipv1
                                                     ipv6
                                                       `cast`
                                                     (GHC.Prim.State#
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                                              (# ipv2
                                                   `cast`
                                                 (GHC.Prim.State#
                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N))_R,
                                                 Data.Vector.Vector
                                                   @ GHC.Types.Double
                                                   0#
                                                   dt6
                                                   ipv3 #) } } } }
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# dt 0#) of wild2 {
                                            GHC.Types.False -> $j dt
                                            GHC.Types.True -> $j 0# }) of ds2 { (#,#) ipv1 ipv2 ->
                                  ipv2 }) })
                              w2)
                           (GHC.Types.:
                              @ (Data.Matrix.Matrix GHC.Types.Double)
                              x
                              (case GHC.List.$wscanlGo
                                      @ (Data.Matrix.Matrix GHC.Types.Double)
                                      @ (Data.Matrix.Matrix GHC.Types.Double)
                                      @ (Data.Matrix.Matrix GHC.Types.Double)
                                      @ (Data.Matrix.Matrix GHC.Types.Double)
                                      ANN.Network.checkDimensions
                                      x
                                      xs of ww { (#,#) ww1 ww2 ->
                               ww2 })) },
                    w #)) -}
7a0518186aad8b08225d9033884eaafb
  $wlvl ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# GHC.Types.Double
    -> ANN.MatrixUtils.ColumnVector GHC.Types.Double
  {- Arity: 8, Strictness: <B,U><B,U><B,U><B,U><B,U><B,U><B,U><B,U>x,
     Inline: [0] -}
9e4126b4730cde42c74570838c8ba3cf
  $wpropagateNet ::
    ANN.MatrixUtils.ColumnVector GHC.Types.Double
    -> [ANN.Layer.Layer] -> [ANN.Layer.PropagatedLayer]
  {- Arity: 2, Strictness: <L,1*U(U,U,U,U,U,U(U,U,U))><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: ANN.MatrixUtils.ColumnVector GHC.Types.Double)
                   (ww :: [ANN.Layer.Layer]) ->
                 case GHC.List.$wscanlGo
                        @ ANN.Layer.PropagatedLayer
                        @ ANN.Layer.Layer
                        @ ANN.Layer.PropagatedLayer
                        @ ANN.Layer.Layer
                        ANN.Layer.propagate
                        (ANN.Layer.PropagatedSensorLayer
                           (case ww of wild {
                              []
                              -> case GHC.List.badHead
                                 ret_ty (ANN.MatrixUtils.ColumnVector GHC.Types.Double)
                                 of {}
                              : x ds1
                              -> case x of wild1 { ANN.Layer.Layer ds2 ds3 ds4 ->
                                 case ds2 of wild2 { Data.Matrix.M dt dt1 dt2 dt3 dt4 ds5 ->
                                 case w of wild3 { Data.Matrix.M dt7 dt8 dt9 dt10 dt11 ds6 ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.==# dt1 dt7) of wild4 {
                                   GHC.Types.False -> ANN.Network.propagateNet1 dt7 dt1
                                   GHC.Types.True
                                   -> case Data.Matrix.$wtoList
                                             @ GHC.Types.Double
                                             dt7
                                             dt8
                                             dt9
                                             dt10
                                             dt11
                                             ds6 of wild5 {
                                        []
                                        -> case GHC.List.badHead
                                           ret_ty (ANN.MatrixUtils.ColumnVector GHC.Types.Double)
                                           of {}
                                        : x1 ds7
                                        -> case x1 of wild6 { GHC.Types.D# x2 ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.>=## x2 0.0##) of wild7 {
                                             GHC.Types.False
                                             -> case ds6 of ww1 { Data.Vector.Vector ww2 ww3 ww4 ->
                                                ANN.Network.$wlvl
                                                  dt7
                                                  dt8
                                                  dt9
                                                  dt10
                                                  dt11
                                                  ww2
                                                  ww3
                                                  ww4 }
                                             GHC.Types.True
                                             -> case GHC.Prim.tagToEnum#
                                                       @ GHC.Types.Bool
                                                       (GHC.Prim.<=## x2 1.0##) of wild8 {
                                                  GHC.Types.False
                                                  -> case ds6 of ww1 { Data.Vector.Vector ww2 ww3 ww4 ->
                                                     ANN.Network.$wlvl
                                                       dt7
                                                       dt8
                                                       dt9
                                                       dt10
                                                       dt11
                                                       ww2
                                                       ww3
                                                       ww4 }
                                                  GHC.Types.True
                                                  -> case (ANN.Network.propagateNet_go
                                                             wild5
                                                             GHC.Types.True)
                                                            `cast`
                                                          (Data.Monoid.N:All[0]) of wild9 {
                                                       GHC.Types.False
                                                       -> case ds6 of ww1 { Data.Vector.Vector ww2 ww3 ww4 ->
                                                          ANN.Network.$wlvl
                                                            dt7
                                                            dt8
                                                            dt9
                                                            dt10
                                                            dt11
                                                            ww2
                                                            ww3
                                                            ww4 }
                                                       GHC.Types.True -> wild3 } } } } } } } } } }))
                        ww of ww1 { (#,#) ww2 ww3 ->
                 ww3 }) -}
908e5953dbb90b3aac206f091a0ba471
  $wupdateNet ::
    ANN.Network.Network
    -> [ANN.Layer.BackpropagatedLayer]
    -> (# [ANN.Layer.Layer], GHC.Types.Double #)
  {- Arity: 2, Strictness: <L,U(A,U(U))><S,1*U>, Inline: [0] -}
c0745e40db0e3343180d9cf03b0dc6aa
  data Network
    = Network {layers :: [ANN.Layer.Layer],
               learningRate :: GHC.Types.Double}
4e00d1159fe0f1553048ca1cd933e222
  backpropagateNet ::
    ANN.MatrixUtils.ColumnVector GHC.Types.Double
    -> [ANN.Layer.PropagatedLayer] -> [ANN.Layer.BackpropagatedLayer]
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U(U,A,U))><S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ANN.MatrixUtils.ColumnVector GHC.Types.Double)
                   (w1 :: [ANN.Layer.PropagatedLayer]) ->
                 case ANN.Network.$wbackpropagateNet w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ ANN.Layer.BackpropagatedLayer ww1 ww2 }) -}
9047e6569080e451d21b29f272976c40
  backpropagateNet_go ::
    [ANN.Layer.PropagatedLayer]
    -> ANN.Layer.PropagatedLayer -> ANN.Layer.PropagatedLayer
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
72067291999f8d8cb32c9eed050ceb3c
  buildNetwork ::
    GHC.Types.Double
    -> [Data.Matrix.Matrix GHC.Types.Double]
    -> ANN.ActivationFunction.ActivationSpec
    -> ANN.Network.Network
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Double)
                   (w1 :: [Data.Matrix.Matrix GHC.Types.Double])
                   (w2 :: ANN.ActivationFunction.ActivationSpec) ->
                 case ANN.Network.$wbuildNetwork w w1 w2 of ww { (#,#) ww1 ww2 ->
                 ANN.Network.Network ww1 ww2 }) -}
f24eb5305d0ab2cbbdfaf31a5e583b2b
  buildNetwork1 :: Data.Matrix.Matrix GHC.Types.Double
  {- Strictness: x -}
fc185769208c5e97b6b06746bdd7ed16
  buildNetwork2 :: [GHC.Types.Double]
  {- Unfolding: (case GHC.Real.$wnumericEnumFrom
                        @ GHC.Types.Double
                        GHC.Float.$fFractionalDouble
                        ANN.Network.buildNetwork3 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Double ww1 ww2 }) -}
f2067b3c1c9238cc6814504bee8cc3fa
  buildNetwork3 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 1.0##) -}
607cbdac354bf340dfc59e0ca90839d3
  checkDimensions ::
    Data.Matrix.Matrix GHC.Types.Double
    -> Data.Matrix.Matrix GHC.Types.Double
    -> Data.Matrix.Matrix GHC.Types.Double
  {- Arity: 2,
     Strictness: <S(SLLLLL),1*U(U,A,A,A,A,A)><S(LSLLLL),1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Data.Matrix.Matrix GHC.Types.Double)
                   (w2 :: Data.Matrix.Matrix GHC.Types.Double) ->
                 case w1 of wild { Data.Matrix.M dt dt1 dt2 dt3 dt4 ds1 ->
                 case w2 of wild1 { Data.Matrix.M dt7 dt8 dt9 dt10 dt11 ds2 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt dt8) of wild2 {
                   GHC.Types.False -> ANN.Network.buildNetwork1
                   GHC.Types.True -> wild1 } } }) -}
12647c2ea9b78b48fa8c50fba5973ae0
  getOutput ::
    [ANN.Layer.PropagatedLayer]
    -> ANN.MatrixUtils.ColumnVector GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [ANN.Layer.PropagatedLayer]) ->
                 case ANN.Network.getOutput_go
                        x
                        (GHC.List.lastError @ ANN.Layer.PropagatedLayer) of wild {
                   ANN.Layer.PropagatedLayer ds1 ds2 ds3 ds4 ds5 ds6 -> ds2
                   ANN.Layer.PropagatedSensorLayer ds1 -> ds1 }) -}
cc3a75c2c3c3d9a28bd0b7891fab4a20
  getOutput_go ::
    [ANN.Layer.PropagatedLayer]
    -> ANN.Layer.PropagatedLayer -> ANN.Layer.PropagatedLayer
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
0e42f5e8aee97d30a30e66ba75fd301a
  getWeights ::
    [ANN.Layer.PropagatedLayer]
    -> ANN.MatrixUtils.ColumnVector GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [ANN.Layer.PropagatedLayer]) ->
                 case ANN.Network.getWeights_go
                        x
                        (GHC.List.lastError @ ANN.Layer.PropagatedLayer) of wild {
                   ANN.Layer.PropagatedLayer ds1 ds2 ds3 ds4 ds5 ds6 -> ds4
                   ANN.Layer.PropagatedSensorLayer ipv
                   -> ANN.Layer.backpropagateFinalLayer3 }) -}
d5c29bd427110ac537d90c2ea5efcf64
  getWeights_go ::
    [ANN.Layer.PropagatedLayer]
    -> ANN.Layer.PropagatedLayer -> ANN.Layer.PropagatedLayer
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
e611ae34f274e90b3548cf80662d6c8a
  layers :: ANN.Network.Network -> [ANN.Layer.Layer]
  RecSel Left ANN.Network.Network
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ANN.Network.Network) ->
                 case ds of wild { ANN.Network.Network ds1 ds2 -> ds1 }) -}
66daf0a3f66d06a9bca2ef753ff569d3
  learningRate :: ANN.Network.Network -> GHC.Types.Double
  RecSel Left ANN.Network.Network
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ANN.Network.Network) ->
                 case ds of wild { ANN.Network.Network ds1 ds2 -> ds2 }) -}
57f8384a028574dfa9e9cfddabf5610f
  propagateNet ::
    ANN.MatrixUtils.ColumnVector GHC.Types.Double
    -> ANN.Network.Network -> [ANN.Layer.PropagatedLayer]
  {- Arity: 2, Strictness: <L,1*U(U,U,U,U,U,U(U,U,U))><S,1*U(U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ANN.MatrixUtils.ColumnVector GHC.Types.Double)
                   (w1 :: ANN.Network.Network) ->
                 case w1 of ww { ANN.Network.Network ww1 ww2 ->
                 ANN.Network.$wpropagateNet w ww1 }) -}
cf16b6c6386c2daee8bbcf6a91b44d90
  propagateNet1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> ANN.MatrixUtils.ColumnVector GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>x -}
4d3f962a3fcdb2f4a0ff1798e946d12c
  propagateNet_go ::
    [GHC.Types.Double] -> GHC.Types.Bool -> Data.Monoid.All
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
f13d36bacc741e0854ba0af693d7c122
  updateNet ::
    ANN.Network.Network
    -> [ANN.Layer.BackpropagatedLayer] -> ANN.Network.Network
  {- Arity: 2, Strictness: <L,U(A,U(U))><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ANN.Network.Network)
                   (w1 :: [ANN.Layer.BackpropagatedLayer]) ->
                 case ANN.Network.$wupdateNet w w1 of ww { (#,#) ww1 ww2 ->
                 ANN.Network.Network ww1 ww2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

